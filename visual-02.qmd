---
title: "ggplot 2.0"
format: html
prefer-html: true
---

# Learning Objectives

-   Analyzing [California Wildfire Data](%22https://www.kaggle.com/datasets/vivekattri/california-wildfire-damage-2014-feb2025/data%22)
-   More on Data Visualization
    -   Bar Chart
        -   `coord_flip()`: Flip the x and y axes to create a horizontal bar chart.
        -   `gemo_text()`: Add text labels to the bars, with the `vjust` and `hjust` arguments to adjust the position of the labels.
    -   Line Chart 2.0
        -   `geom_line()`: Connect data points with lines.
        -   `facet_wrap()`: Create multiple plots based on a categorical variable.

# Load Packages and Data

```{r}
library(tidyverse)
```

```{r}
load("data/wildfire.RData")
```

After loading the data, you should see a data frame called `df_clean` in your environment.

# Data Exploration

We can use the `glimpse()` function to get a quick overview of the data.

::: callout-note
`glimpse()` is a function from the `dplyr` package that provides a concise summary of a data frame.
:::

```{r}
glimpse(df_clean)
```

# Data Analysis

## Questions to Answer

Here we will analyze the data to answer the following questions:

-   Q1: Top 5 counties with the **highest number** of wildfires?
-   Q2: Top 5 counties with the highest **average burnt areas**?
-   Q3: How does the number of wildfires change over the years for each county?

## Q1: Top Counties with the Highest Number of Wildfires

### Method 1: `group_by()` and `summarize()`

To answer this question, we can first try the `group_by()` and `summarize()` functions to count the number of wildfires by county.

```{r}
df_clean |>
  group_by(location) |>
  summarize(num_of_wildfires = n()) |>
  arrange(desc(num_of_wildfires))
```

### Method 2: `count()`

We can also use the `count()` function to achieve the same result, which is more concise.

```{r}
df_clean |>
  count(location) |>
  arrange(desc(n))
```

## Q2: Top 5 counties with the highest **average burnt areas**?

```{r}
df_clean |>
  group_by(location) |>
  summarize(avg_burnt_area = mean(area)) |>
  arrange(desc(avg_burnt_area))
```

## Q3: How does the *average burnt area* change over the years for each county?

First, we need want to translate this question to a data analysis task: calculate the number of wildfires by year for each county. That means, we need to group the data by `location` and `year`, and then compute *average burnt area* for each group.

Note that the original dataframe doesn't have a `year` column. We need to extract the year from the `date` column. Here we can use the `year()` function from the `lubridate` package to extract the year from the `date` column.

```{r}
df_clean |>
  group_by(location, year = year(date)) |>
  summarize(avg_burnt_area = mean(area, na.rm = TRUE)) 
```

# Data Visualization

## Bar Chart: Number of Wildfires by County

We chose to use a bar chart to visualize the number of wildfires by county because it is a good way to compare the number of wildfires (numeric) across different counties (categorical).

We start by counting the number of wildfires by county using the `count()` function, and then create a bar chart using `ggplot()`. Remember the key componenets of a bar chart:

-   Data: The data frame with the variables to be plotted.
-   `ggplot(aes(x, y))`: The mapping between the data and the visual properties of the plot.
-   `geom_col()`: The geometric object for a bar chart.
-   `labs()`: The labels for the title, x-axis, and y-axis.

```{r}
df_clean |>
  count(location) |>
  ggplot(aes(x = location, y = n)) +
  geom_col() +
  labs(title = "Number of Wildfires by County",
       x = "County",
       y = "Number of Wildfires")
```

Then, we can add more customization to the plot, such as changing the fill color (`geom_col(fill = "red")`), using a different theme(\`theme_bw\`\`).

```{r}
df_clean |>
  count(location) |>
  ggplot(aes(x = location, y = n)) +
  geom_col(fill = "red") + 
  labs(title = "Number of Wildfires by County",
       x = "County",
       y = "Number of Wildfires") +
  theme_bw() 
```

Because the county names are long, we can use `coord_flip()` to flip the x and y axes to create a horizontal bar chart.

```{r}
df_clean |>
  count(location) |>
  ggplot(aes(x = location, y = n)) +
  geom_col(fill = "red") +
  labs(title = "Number of Wildfires by County",
       x = "County",
       y = "Number of Wildfires") +
  theme_bw() +
  coord_flip()
```

Then, we may want to reorder the bars by the number of wildfires. We can use the `fct_reorder()` function from the `forcats` package to reorder the bars by the number of wildfires.

```{r}
df_clean |>
  count(location) |>
  ggplot(aes(x = fct_reorder(location, n), y = n)) +
  geom_col(fill = "red") +
  labs(title = "Number of Wildfires by County",
       x = "County",
       y = "Number of Wildfires") +
  theme_bw() +
  coord_flip()
```

Finally, we can add text labels to the bars using the `geom_text()` function, with the `vjust` and `hjust` arguments to adjust the position of the labels.

```{r}
df_clean |>
  count(location) |>
  ggplot(aes(x = fct_reorder(location, n), y = n)) +
  geom_col(fill = "red") +
  labs(title = "Number of Wildfires by County",
       x = "County",
       y = "Number of Wildfires") +
  theme_bw() +
  coord_flip() +
  geom_text(aes(label = n), vjust = 0, hjust = 1.1)
```

Let's put all the code together:

```{r}
df_clean |>
  count(location) |> # <1>
  ggplot(aes(x = fct_reorder(location, n), y = n)) + # <2>
  geom_col(fill = "red") + # <3>
  labs(title = "Number of Wildfires by County",
       x = "County",
       y = "Number of Wildfires") + # <4>
  theme_bw() + # <5>
  coord_flip() + # <6>
  geom_text(aes(label = n), vjust = -0.5, hjust = 1.1) # <7>
```

1.  Count the number of wildfires by county.
2.  Map the county names to the x-axis and the number of wildfires to the y-axis.
3.  Create a bar chart with red bars.
4.  Add labels for the title, x-axis, and y-axis.
5.  Use a black-and-white theme.
6.  Flip the x and y axes to create a horizontal bar chart.
7.  Add text labels to the bars.

## Line Plot: Number of Wildfires by Year for Each County

We chose to use a line plot to visualize the number of wildfires by year for each county because it is a good way to show trends *over time*.

Let's start by calculating the number of wildfires by year for each county using the `group_by()` and `summarize()` functions.

```{r}
df_clean |>
  count(location, year = year(date))
```

Then, we can create a line plot using `ggplot()`. Remember the key components of a line plot: - Data: The data frame with the variables to be plotted. - `ggplot(aes(x, y))`: The mapping between the data and the visual properties of the plot. - `geom_line()`: The geometric object for a line plot. - `labs()`: The labels for the title, x-axis, and y-axis.

Since we want to show the number of wildfires by year for each county, we can map the `year` to the x-axis, the number of wildfires `n` to the y-axis, and the county names (`location`) to the color.

```{r}
df_clean |>
  count(location, year = year(date)) |>
  ggplot(aes(x = year, y = n, color = location)) +
  geom_line() +
  labs(title = "Number of Wildfires by Year",
       x = "Year",
       y = "Number of Wildfires")
```

As we see the plot, it is not very informative because there are too many counties. We can use the `facet_wrap()` function to create multiple plots based on the `location` variable, and remove the legend using `theme(legend.position = "none")`, also, we can change the theme to `theme_bw()`.

```{r}
df_clean |>
  count(location, year = year(date)) |>
  ggplot(aes(x = year, y = n, color = location)) + # <1>
  geom_line() + # <2>
  labs(title = "Number of Wildfires by County and Year",
       x = "Year",
       y = "Number of wildfires") + # <3>
  theme_bw() + # <4>
  facet_wrap(~location) + # <5>
  theme(legend.position = "none") # <6>
```

1.  Map the year to the x-axis, the number of wildfires to the y-axis, and the county names to the color.
2.  Create a line plot.
3.  Add labels for the title, x-axis, and y-axis.
4.  Use a black-and-white theme.
5.  Create multiple plots based on the county names.
6.  Remove the legend.

# `Plotly`: Interactive Data Visualization

We can use the `plotly` package to create interactive data visualizations. Here we will create an interactive bar chart to show the number of wildfires by county.

```{r}
library(plotly)
```

## Interactive Bar Chart

```{r}
p1 <- df_clean |>
  count(location) |>
  ggplot(aes(x = location, y = n)) +
  geom_col(fill = "red") +
  labs(title = "Number of Wildfires by County",
       x = "County",
       y = "Number of Wildfires") +
  theme_bw() +
  coord_flip() 

ggplotly(p1)
```

## Interactive Line Plot

```{r}
p2 <- df_clean |>
  count(location, year = year(date)) |>
  ggplot(aes(x = year, y = n, color = location)) +
  geom_line() +
  labs(title = "Number of Wildfires by Year",
       x = "Year",
       y = "Number of Wildfires") +
  theme_classic()

ggplotly(p2)
```

## More on `plotly`

We can also create an interactive scatter plot to show the financial losses from wildfires in California. We can map the `date` to the x-axis, the `financial_loss` to the y-axis, the `cause` to the color, and create a tooltip with additional information.

```{r}

p3 <- df_clean |>
  ggplot(aes(x = date, y = financial_loss, color = cause, text = paste(
    "Date:", date,
    "<br>Location:", location,
    "<br>Area Burned:", area, "acres",
    "<br>Homes Destroyed:", homes,
    "<br>Businesses Affected:", businesses,
    "<br>Vehicles Destroyed:", vehicles,
    "<br>Fatalities:", fatalities
  ))) + # <1>
  geom_point(size = 2) + # <2>
  labs(title = "Financial Losses from Wildfires in California",
       x = "Date",
       y = "Financial Loss ($)",
       color = "Cause of Wildfire") + # <3>
  theme_minimal() # <4>

ggplotly(p3, tooltip = "text") # <5>
```

1.  Map the `date` to the x-axis, the `financial_loss` to the y-axis, the `cause` to the color, and create a tooltip with additional information. `<br>` means a line break.
2.  Create a scatter plot.
3.  Add labels for the title, x-axis, y-axis, and color.
4.  Use a minimal theme.

# Save the Plots

To save a plot as an image file, we can use the `ggsave()` function. Here we will save the bar chart as a PNG file with a width of 8 inches, a height of 6 inches, and a resolution of 300 dpi.

```{r}
#| eval: false
ggsave("bar_chart.png", p1, width = 8, height = 6, dpi = 300)
```
